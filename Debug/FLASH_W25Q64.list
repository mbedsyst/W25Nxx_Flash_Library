
FLASH_W25Q64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000045c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005f0  080005f8  000015f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005f0  080005f0  000015f8  2**0
                  CONTENTS
  4 .ARM          00000000  080005f0  080005f0  000015f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005f0  080005f8  000015f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005f0  080005f0  000015f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005f4  080005f4  000015f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005f8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005f8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000145f  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006cc  00000000  00000000  00002a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00003158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000154  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e257  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002579  00000000  00000000  000116f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000500db  00000000  00000000  00013c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00063d47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c0  00000000  00000000  00063d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0006434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005d8 	.word	0x080005d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005d8 	.word	0x080005d8

080001d4 <LED_Init>:
#include "LED.h"

void LED_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 80001d8:	4b14      	ldr	r3, [pc, #80]	@ (800022c <LED_Init+0x58>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a13      	ldr	r2, [pc, #76]	@ (800022c <LED_Init+0x58>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 80001e4:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <LED_Init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	@ (8000230 <LED_Init+0x5c>)
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <LED_Init+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <LED_Init+0x5c>)
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <LED_Init+0x5c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <LED_Init+0x5c>)
 8000202:	f023 0320 	bic.w	r3, r3, #32
 8000206:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <LED_Init+0x5c>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a08      	ldr	r2, [pc, #32]	@ (8000230 <LED_Init+0x5c>)
 800020e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000212:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <LED_Init+0x5c>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a05      	ldr	r2, [pc, #20]	@ (8000230 <LED_Init+0x5c>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800021e:	60d3      	str	r3, [r2, #12]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000

08000234 <LED_Toggle>:
{
	GPIOA->ODR &= ~(1<<5);
}

void LED_Toggle(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
    GPIOA->ODR ^= (1U << 5);
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <LED_Toggle+0x1c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <LED_Toggle+0x1c>)
 800023e:	f083 0320 	eor.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <SPI2_Init>:
 *	SPI2_SCK  - PB13
 *	SPI2_NSS  - PB12
 */

void SPI2_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port B
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000258:	4b16      	ldr	r3, [pc, #88]	@ (80002b4 <SPI2_Init+0x60>)
 800025a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025c:	4a15      	ldr	r2, [pc, #84]	@ (80002b4 <SPI2_Init+0x60>)
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	6313      	str	r3, [r2, #48]	@ 0x30
	// Enable clock SPI2 peripheral
	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000264:	4b13      	ldr	r3, [pc, #76]	@ (80002b4 <SPI2_Init+0x60>)
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	4a12      	ldr	r2, [pc, #72]	@ (80002b4 <SPI2_Init+0x60>)
 800026a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800026e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure PB13, PB14, PB15 as Alternate Function for SPI2
	GPIOB->MODER &= ~(GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 8000270:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <SPI2_Init+0x64>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <SPI2_Init+0x64>)
 8000276:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800027a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE15_1);
 800027c:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <SPI2_Init+0x64>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <SPI2_Init+0x64>)
 8000282:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= ((5 << 20) | (5 << 24) | (5 << 28));
 8000288:	4b0b      	ldr	r3, [pc, #44]	@ (80002b8 <SPI2_Init+0x64>)
 800028a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800028c:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <SPI2_Init+0x64>)
 800028e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000292:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000296:	6253      	str	r3, [r2, #36]	@ 0x24

	// Pull CS High
	SPI2_DeselectSlave();
 8000298:	f000 f820 	bl	80002dc <SPI2_DeselectSlave>

	// Configure SPI2 in master mode, baud rate = fPCLK / 16, CPOL = 0, CPHA = 0, 8-bit data format
	SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 800029c:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <SPI2_Init+0x68>)
 800029e:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80002a2:	601a      	str	r2, [r3, #0]
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <SPI2_Init+0x68>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a04      	ldr	r2, [pc, #16]	@ (80002bc <SPI2_Init+0x68>)
 80002aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020400 	.word	0x40020400
 80002bc:	40003800 	.word	0x40003800

080002c0 <SPI2_SelectSlave>:

void SPI2_SelectSlave(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 80002c4:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <SPI2_SelectSlave+0x18>)
 80002c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80002ca:	619a      	str	r2, [r3, #24]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020400 	.word	0x40020400

080002dc <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
    	// Pull CS high
    	GPIOB->BSRR = (1 << 12);
 80002e0:	4b04      	ldr	r3, [pc, #16]	@ (80002f4 <SPI2_DeselectSlave+0x18>)
 80002e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002e6:	619a      	str	r2, [r3, #24]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40020400 	.word	0x40020400

080002f8 <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
    	// Wait until TXE (Transmit buffer empty)
    	while(!(SPI2->SR & SPI_SR_TXE));
 8000302:	bf00      	nop
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <SPI2_TransmitReceiveByte+0x40>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f003 0302 	and.w	r3, r3, #2
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f9      	beq.n	8000304 <SPI2_TransmitReceiveByte+0xc>
    	// Send data
    	SPI2->DR = data;
 8000310:	4a09      	ldr	r2, [pc, #36]	@ (8000338 <SPI2_TransmitReceiveByte+0x40>)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	60d3      	str	r3, [r2, #12]
    	// Wait until RXNE (Receive buffer not empty)
    	while(!(SPI2->SR & SPI_SR_RXNE));
 8000316:	bf00      	nop
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <SPI2_TransmitReceiveByte+0x40>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <SPI2_TransmitReceiveByte+0x20>
    	// Return received data
    	return (uint8_t)(SPI2->DR);
 8000324:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <SPI2_TransmitReceiveByte+0x40>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	b2db      	uxtb	r3, r3
}
 800032a:	4618      	mov	r0, r3
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40003800 	.word	0x40003800

0800033c <delay_ms>:
#include "SYSTICK.h"

void delay_ms(uint32_t ms)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->CTRL |= (1<<0) | (1<<2) ;
 8000344:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <delay_ms+0x58>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a12      	ldr	r2, [pc, #72]	@ (8000394 <delay_ms+0x58>)
 800034a:	f043 0305 	orr.w	r3, r3, #5
 800034e:	6013      	str	r3, [r2, #0]
	SysTick->LOAD  = 15999;
 8000350:	4b10      	ldr	r3, [pc, #64]	@ (8000394 <delay_ms+0x58>)
 8000352:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000356:	605a      	str	r2, [r3, #4]
	for(i=0; i<ms; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	e009      	b.n	8000372 <delay_ms+0x36>
	{
		while(!(SysTick->CTRL & (1<<16)));
 800035e:	bf00      	nop
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <delay_ms+0x58>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f9      	beq.n	8000360 <delay_ms+0x24>
	for(i=0; i<ms; i++)
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	3301      	adds	r3, #1
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	429a      	cmp	r2, r3
 8000378:	d3f1      	bcc.n	800035e <delay_ms+0x22>
	}
	SysTick->CTRL &=~(1U<<0) ;
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <delay_ms+0x58>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <delay_ms+0x58>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e010 	.word	0xe000e010

08000398 <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	085a      	lsrs	r2, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	441a      	add	r2, r3
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b0:	b29b      	uxth	r3, r3
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
	...

080003c0 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 80003ca:	6839      	ldr	r1, [r7, #0]
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ffe3 	bl	8000398 <Compute_UART_Baud>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b03      	ldr	r3, [pc, #12]	@ (80003e4 <UART2_SetBaudRate+0x24>)
 80003d8:	609a      	str	r2, [r3, #8]
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40004400 	.word	0x40004400

080003e8 <UART2_Init>:

void UART2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003ec:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <UART2_Init+0x68>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f0:	4a17      	ldr	r2, [pc, #92]	@ (8000450 <UART2_Init+0x68>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <UART2_Init+0x68>)
 80003fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003fc:	4a14      	ldr	r2, [pc, #80]	@ (8000450 <UART2_Init+0x68>)
 80003fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000402:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000404:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <UART2_Init+0x6c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a12      	ldr	r2, [pc, #72]	@ (8000454 <UART2_Init+0x6c>)
 800040a:	f023 0310 	bic.w	r3, r3, #16
 800040e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000410:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <UART2_Init+0x6c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0f      	ldr	r2, [pc, #60]	@ (8000454 <UART2_Init+0x6c>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <UART2_Init+0x6c>)
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	4a0c      	ldr	r2, [pc, #48]	@ (8000454 <UART2_Init+0x6c>)
 8000422:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000426:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 8000428:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800042c:	480a      	ldr	r0, [pc, #40]	@ (8000458 <UART2_Init+0x70>)
 800042e:	f7ff ffc7 	bl	80003c0 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000432:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <UART2_Init+0x74>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	4a09      	ldr	r2, [pc, #36]	@ (800045c <UART2_Init+0x74>)
 8000438:	f043 030c 	orr.w	r3, r3, #12
 800043c:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 800043e:	4b07      	ldr	r3, [pc, #28]	@ (800045c <UART2_Init+0x74>)
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	4a06      	ldr	r2, [pc, #24]	@ (800045c <UART2_Init+0x74>)
 8000444:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000448:	60d3      	str	r3, [r2, #12]
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40023800 	.word	0x40023800
 8000454:	40020000 	.word	0x40020000
 8000458:	00f42400 	.word	0x00f42400
 800045c:	40004400 	.word	0x40004400

08000460 <W25Q_Reset>:
	SPI2_DeselectSlave();
	delay_ms(10);
}

static void W25Q_Reset(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 8000464:	f7ff ff2c 	bl	80002c0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_RESET);
 8000468:	2066      	movs	r0, #102	@ 0x66
 800046a:	f7ff ff45 	bl	80002f8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(EXECUTE_RESET);
 800046e:	2099      	movs	r0, #153	@ 0x99
 8000470:	f7ff ff42 	bl	80002f8 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 8000474:	f7ff ff32 	bl	80002dc <SPI2_DeselectSlave>
	delay_ms(100);
 8000478:	2064      	movs	r0, #100	@ 0x64
 800047a:	f7ff ff5f 	bl	800033c <delay_ms>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}

08000482 <W25Q_Init>:

void W25Q_Init(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
	SPI2_Init();
 8000486:	f7ff fee5 	bl	8000254 <SPI2_Init>
	W25Q_Reset();
 800048a:	f7ff ffe9 	bl	8000460 <W25Q_Reset>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}

08000492 <W25Q_ReadData>:
	SPI2_DeselectSlave();
	return ((id[0] << 24) | (id[1] << 16) | (id[2] << 8) | (id[3]));
}

void W25Q_ReadData(uint32_t startPage, uint8_t offset, uint8_t *buffer, uint16_t length)
{
 8000492:	b590      	push	{r4, r7, lr}
 8000494:	b087      	sub	sp, #28
 8000496:	af00      	add	r7, sp, #0
 8000498:	60f8      	str	r0, [r7, #12]
 800049a:	607a      	str	r2, [r7, #4]
 800049c:	461a      	mov	r2, r3
 800049e:	460b      	mov	r3, r1
 80004a0:	72fb      	strb	r3, [r7, #11]
 80004a2:	4613      	mov	r3, r2
 80004a4:	813b      	strh	r3, [r7, #8]
	uint32_t memAddress = (startPage * 256) + offset;
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	021a      	lsls	r2, r3, #8
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	4413      	add	r3, r2
 80004ae:	613b      	str	r3, [r7, #16]

	SPI2_SelectSlave();
 80004b0:	f7ff ff06 	bl	80002c0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(NORMAL_READ);
 80004b4:	2003      	movs	r0, #3
 80004b6:	f7ff ff1f 	bl	80002f8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 16) & 0xFF);
 80004ba:	693b      	ldr	r3, [r7, #16]
 80004bc:	0c1b      	lsrs	r3, r3, #16
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff19 	bl	80002f8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 8) & 0xFF);
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	0a1b      	lsrs	r3, r3, #8
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff13 	bl	80002f8 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(memAddress & 0xFF);
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff0e 	bl	80002f8 <SPI2_TransmitReceiveByte>
	for (uint16_t i = 0; i < length; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	82fb      	strh	r3, [r7, #22]
 80004e0:	e00a      	b.n	80004f8 <W25Q_ReadData+0x66>
	{
		// Send dummy byte and receive data
		buffer[i] = SPI2_TransmitReceiveByte(0xFF);
 80004e2:	8afb      	ldrh	r3, [r7, #22]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	18d4      	adds	r4, r2, r3
 80004e8:	20ff      	movs	r0, #255	@ 0xff
 80004ea:	f7ff ff05 	bl	80002f8 <SPI2_TransmitReceiveByte>
 80004ee:	4603      	mov	r3, r0
 80004f0:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < length; i++)
 80004f2:	8afb      	ldrh	r3, [r7, #22]
 80004f4:	3301      	adds	r3, #1
 80004f6:	82fb      	strh	r3, [r7, #22]
 80004f8:	8afa      	ldrh	r2, [r7, #22]
 80004fa:	893b      	ldrh	r3, [r7, #8]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3f0      	bcc.n	80004e2 <W25Q_ReadData+0x50>
	}
	SPI2_DeselectSlave();
 8000500:	f7ff feec 	bl	80002dc <SPI2_DeselectSlave>
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	bd90      	pop	{r4, r7, pc}

0800050c <main>:
#include "LED.h"
#include "UART.h"
#include "W25Qxx.h"

int main()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8000512:	af00      	add	r7, sp, #0
	uint8_t data[4096];
	W25Q_Init();
 8000514:	f7ff ffb5 	bl	8000482 <W25Q_Init>
	LED_Init();
 8000518:	f7ff fe5c 	bl	80001d4 <LED_Init>
	UART2_Init();
 800051c:	f7ff ff64 	bl	80003e8 <UART2_Init>

	LED_Toggle();
 8000520:	f7ff fe88 	bl	8000234 <LED_Toggle>
	W25Q_ReadData(0, 0, data, 4096);
 8000524:	463a      	mov	r2, r7
 8000526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800052a:	2100      	movs	r1, #0
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff ffb0 	bl	8000492 <W25Q_ReadData>
	LED_Toggle();
 8000532:	f7ff fe7f 	bl	8000234 <LED_Toggle>

	while(1)
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <main+0x2a>
	...

0800053c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800053c:	480d      	ldr	r0, [pc, #52]	@ (8000574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000540:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000546:	490d      	ldr	r1, [pc, #52]	@ (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000548:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <LoopForever+0xe>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800055c:	4c0a      	ldr	r4, [pc, #40]	@ (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800056a:	f000 f811 	bl	8000590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff ffcd 	bl	800050c <main>

08000572 <LoopForever>:

LoopForever:
  b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   r0, =_estack
 8000574:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000580:	080005f8 	.word	0x080005f8
  ldr r2, =_sbss
 8000584:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000588:	2000001c 	.word	0x2000001c

0800058c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC_IRQHandler>
	...

08000590 <__libc_init_array>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	4d0d      	ldr	r5, [pc, #52]	@ (80005c8 <__libc_init_array+0x38>)
 8000594:	4c0d      	ldr	r4, [pc, #52]	@ (80005cc <__libc_init_array+0x3c>)
 8000596:	1b64      	subs	r4, r4, r5
 8000598:	10a4      	asrs	r4, r4, #2
 800059a:	2600      	movs	r6, #0
 800059c:	42a6      	cmp	r6, r4
 800059e:	d109      	bne.n	80005b4 <__libc_init_array+0x24>
 80005a0:	4d0b      	ldr	r5, [pc, #44]	@ (80005d0 <__libc_init_array+0x40>)
 80005a2:	4c0c      	ldr	r4, [pc, #48]	@ (80005d4 <__libc_init_array+0x44>)
 80005a4:	f000 f818 	bl	80005d8 <_init>
 80005a8:	1b64      	subs	r4, r4, r5
 80005aa:	10a4      	asrs	r4, r4, #2
 80005ac:	2600      	movs	r6, #0
 80005ae:	42a6      	cmp	r6, r4
 80005b0:	d105      	bne.n	80005be <__libc_init_array+0x2e>
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b8:	4798      	blx	r3
 80005ba:	3601      	adds	r6, #1
 80005bc:	e7ee      	b.n	800059c <__libc_init_array+0xc>
 80005be:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c2:	4798      	blx	r3
 80005c4:	3601      	adds	r6, #1
 80005c6:	e7f2      	b.n	80005ae <__libc_init_array+0x1e>
 80005c8:	080005f0 	.word	0x080005f0
 80005cc:	080005f0 	.word	0x080005f0
 80005d0:	080005f0 	.word	0x080005f0
 80005d4:	080005f4 	.word	0x080005f4

080005d8 <_init>:
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005da:	bf00      	nop
 80005dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005de:	bc08      	pop	{r3}
 80005e0:	469e      	mov	lr, r3
 80005e2:	4770      	bx	lr

080005e4 <_fini>:
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e6:	bf00      	nop
 80005e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ea:	bc08      	pop	{r3}
 80005ec:	469e      	mov	lr, r3
 80005ee:	4770      	bx	lr
